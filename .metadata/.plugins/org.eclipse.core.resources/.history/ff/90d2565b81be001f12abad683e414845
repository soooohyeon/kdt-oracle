-- 1. JOIN - INNER

-- 도서테이블과 도서가격 테이블 생성
CREATE TABLE TBL_BOOKS(
	BOOK_ID NUMBER,
	BOOK_TITLE VARCHAR2(1000),
	BOOK_AUTHOR VARCHAR2(100),
	CONSTRAINT PK_BOOK PRIMARY KEY (BOOK_ID)
);

CREATE TABLE TBL_BOOKPRICE(
	BP_ID NUMBER,
	BP_PRICE NUMBER,
	CONSTRAINT BP_PK PRIMARY KEY(BP_ID)
);

INSERT INTO TBL_BOOKS
--VALUES(1, '위대한 개츠비', 'F.스콧 피츠제럴드');
--VALUES(2, '해리포터와 마법사의 돌', 'J.K 롤링');
--VALUES(3, '1984', ' 조지오웰');
--VALUES(4, '오만과 편견', '제인 오스틴');
--VALUES(5, '데미안', '헤르만 헤세');
--VALUES(6, '모모', '미하엘 엔더');
VALUES(7, 'DBMS 완전정복', 'DBMS');

INSERT INTO TBL_BOOKPRICE
--VALUES(1, 15000);
--VALUES(2, 18000);
--VALUES(3, 14000);
--VALUES(4, 17000);
--VALUES(5, 18000);
--VALUES(6, 20000);
VALUES(7, 20000);

-- 2개의 테이블 내부조인
SELECT A.BOOK_ID, A.BOOK_TITLE, A.BOOK_AUTHOR, B.BP_ID, B.BP_PRICE
FROM TBL_BOOKS A INNER JOIN TBL_BOOKPRICE B
ON A.BOOK_ID = B.BP_ID;

DROP TABLE TBL_BOOKS;
DROP TABLE TBL_BOOKPRICE;
-- 도서관
-- 도서 테이블, 회원 테이블, 렌탈 테이블
CREATE TABLE TBL_BOOKS(
	BOOK_ID NUMBER,
	BOOK_TITLE VARCHAR2(1000),
	BOOK_AUTHOR VARCHAR2(100),
	CONSTRAINT PK_BOOK PRIMARY KEY (BOOK_ID)
);

CREATE TABLE TBL_MEMBER(
	MEM_ID NUMBER,
	MEM_NAME VARCHAR2(100),
	MEM_PHONE VARCHAR2(100),
	MEM_EMAIL VARCHAR2(100),
	CONSTRAINT PK_MEMBER PRIMARY KEY (MEM_ID)
);

CREATE TABLE TBL_RENTAL(
	REN_ID NUMBER,
	MEM_ID NUMBER,
	BOOK_ID NUMBER,
	REN_RENTALDATE DATE,
	REN_RETURNDATE DATE,
	CONSTRAINT PK_RENTAL PRIMARY KEY (REN_ID),
	CONSTRAINT FK_RENTAL_MEM FOREIGN KEY (MEM_ID) REFERENCES TBL_MEMBER(MEM_ID),
	CONSTRAINT FK_RENTAL_BOOKS FOREIGN KEY (BOOK_ID) REFERENCES TBL_BOOKS(BOOK_ID)
);

INSERT INTO TBL_BOOKS
--VALUES(1, '위대한 개츠비', 'F.스콧 피츠제럴드');
--VALUES(2, '해리포터와 마법사의 돌', 'J.K 롤링');
--VALUES(3, '1984', '조지오웰');
--VALUES(4, '오만과 편견', '제인 오스틴');
--VALUES(5, '데미안', '헤르만 헤세');
--VALUES(6, '모모', '미하엘 엔더');
--VALUES(7, 'DBMS 완전정복', 'DBMS');

INSERT INTO TBL_MEMBER
VALUES
--(1, '짱구', '123-456-7890', 'aaa@koreait.com');
--(2, '유리', '987-654-3210', 'bbb@koreait.com');
--(3, '철수', '555-123-4567', 'ccc@koreait.com');
--(4, '훈이', '777-888-9999', 'ddd@koreait.com');
--(5, '맹구', '555-777-3333', 'eee@koreait.com');

INSERT INTO TBL_RENTAL
VALUES
--(1, 1, 3, TO_DATE('2023-12-11', 'YYYY-MM-DD'), TO_DATE('2023-12-18', 'YYYY-MM-DD'));
--(2, 2, 1, TO_DATE('2023-12-11', 'YYYY-MM-DD'), TO_DATE('2023-12-18', 'YYYY-MM-DD'));
--(3, 3, 2, TO_DATE('2023-12-13', 'YYYY-MM-DD'), TO_DATE('2023-12-20', 'YYYY-MM-DD'));
--(4, 4, 4, TO_DATE('2023-12-20', 'YYYY-MM-DD'), TO_DATE('2023-12-27', 'YYYY-MM-DD'));
--(5, 5, 5, TO_DATE('2023-12-22', 'YYYY-MM-DD'), TO_DATE('2023-12-29', 'YYYY-MM-DD'));

-- 등가조인 : 두 개 이상의 테이블 조인시,특정 컬럼들의 값이 서로 같은 행만 결과로 반환

-- 대여 정보의 책의 저자를 가져오는 등가조인
-- 1) 행의 개수 먼저 파악 후 선행, 후행 테이블 설정
SELECT COUNT(*)
FROM TBL_BOOKS;

SELECT COUNT(*)
FROM TBL_RENTAL;

-- 2) JOIN을 사용하여 두개의 테이블 조회
SELECT TR.REN_RENTALDATE, TR.REN_RETURNDATE, TB.BOOK_AUTHOR
FROM TBL_RENTAL tr INNER JOIN TBL_BOOKS tb
-- 두개의 테이블에서 일치하는 컬럼 확인 후 ON절에 추가
ON TR.BOOK_ID = TB.BOOK_ID;

-- 대여한 책이름과 반납날짜 가져오는 등가조인
SELECT TB.BOOK_TITLE, TR.REN_RETURNDATE
FROM TBL_BOOKS tb JOIN TBL_RENTAL tr 
ON TB.BOOK_ID = TR.BOOK_ID;

--SELECT TB.* , TR.*
SELECT *
FROM TBL_BOOKS tb JOIN TBL_RENTAL tr 
ON TB.BOOK_ID = TR.BOOK_ID;

-- 회원의 이름과 대여한 책의 제목만 가져오는 등가조인
-- > TBL_BOOKS과 TBL_MEMBER가 동일한 컬럼이 없는 경우
SELECT TB.BOOK_TITLE, TM.MEM_NAME
FROM TBL_RENTAL TR
JOIN TBL_MEMBER TM ON TR.MEM_ID = TM.MEM_ID
JOIN TBL_BOOKS TB ON TR.MEM_ID = TB.BOOK_ID;

SELECT * FROM TBL_BOOKS;
SELECT * FROM TBL_MEMBER;
SELECT * FROM TBL_RENTAL;

